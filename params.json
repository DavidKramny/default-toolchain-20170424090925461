{
  "name": "Foosbuzz",
  "tagline": "A Raspberry Pi wired Foosball table that uses the Watson IoT Foundation, Cloudant, and Node-RED",
  "body": "## Overview\r\nThis foosball table started out as something equivalent to a teaming project as we brought five people together in Austin, TX to retrofit an existing table with the sensors needed to track goals.  Version 2 of the code in this GitHub repo is a complete revamp and rethinking of that project to improve it's demo quality and appearance.  Feel free to let us know what you add to the app.  This is a very basic example of using Node-RED to work with an MQTT broker and a noSQL database.  \r\n\r\n## Why Node-RED?\r\nThis table was conceived as a demo and nothing is more appealing than a visual interface.  So while there are plenty of wires and flows that could have been improved in raw code, this particular app is meant to visually guide a user through the logic as well.  Node-RED is a great wire framing platform and available on a variety of operating systems.  \r\n\r\n## Technologies\r\n* [Watson IoT Foundation](https://developer.ibm.com/iotfoundation/)\r\n* [Cloudant noSQL](https://cloudant.com/)\r\n* [Node-RED](http://nodered.org/)\r\n* [Express/Node.js](http://expressjs.com/)\r\n* [Passport OAuth](http://passportjs.org/)\r\n* [Twitter](https://apps.twitter.com/)\r\n\r\n### Hardware: Suggested Parts and Tips for Fitting Your Foosball Table\r\n\r\n#### The Basics\r\n* Two Sets of Break Beam Sensors (Adafruit currently has the best option out there): [https://www.adafruit.com/products/2168](Adafruit)\r\n* A Raspberry Pi 3 Kit (You need the memory card, a mountable case, a power supply, and the Pi): [CanaKit Raspberry Pi 3](http://www.amazon.com/CanaKit-Raspberry-Complete-Starter-Kit/dp/B01C6Q2GSY?ie=UTF8&psc=1&redirect=true&ref_=ox_sc_act_title_1&smid=A30ZYR2W3VAJ0A)\r\n* An arcade push button (We purchased ours from Fry's): [http://www.amazon.com/Arcade-Buttons-Multicade-Choice-Colors/dp/B016ZSCOJU/ref=sr_1_3?ie=UTF8&qid=1458770680&sr=8-3&keywords=arcade+push+button+blue](http://www.amazon.com/Arcade-Buttons-Multicade-Choice-Colors/dp/B016ZSCOJU/ref=sr_1_3?ie=UTF8&qid=1458770680&sr=8-3&keywords=arcade+push+button+blue)\r\n\r\n#### Wiring\r\nNow for the wiring particulars we have a few suggested routes, but do what works best with your skill set.\r\n\r\nYou either can splice wires with female headers or solder headers onto the wires: [Female Headers](http://www.amazon.com/TOOGOO-Female-Solderless-Flexible-Breadboard/dp/B00HUH9GOC/ref=sr_1_1?ie=UTF8&qid=1458770795&sr=8-1&keywords=female+to+female+wires).  We went the splicing route.\r\n\r\nYou can use some cat 5/4 pair cable (ethernet cable) to splice the wires and make a common ground and power otherwise you'll need a lot of single strand copper wire.  We used four pair cable and kept a common ground and power with a separate data for each goal.  Total wiring is 5 ground, 4 power, and 3 data between the two sensors and the button.\r\n\r\nIf you're familiar with wiring then skip the soldering and buy some heat shrink wire [butts](http://www.elecdirect.com/butt-splice-heat-shrink-terminals-crimp-shrink-12-10ga-25pk?gclid=CjwKEAjww9O3BRDp1tq0jIP023YSJAB0-j1S1JUElzwio4ogohwFYLGEh8nma9iw-keqoVBC6fMOsRoC2vXw_wcB). You can also twist the wires to splice then and apply electrical tape.  Or skip straight to soldering and stop reading these instructions. \r\n\r\n#### The Table\r\nTables differ vastly across geography.  Our table is a [Tornado Cyclone II](http://www.foosballsoccer.com/cyclone-ii.html).  You can use whatever table you like with the caveat that you need a large enough return chute to place the sensors where the ball will both hit and not cause a large amount of sensor damage. \r\n\r\n#### Tips for Installing\r\n* Breadboard the sensors and button before you start installing.\r\n* Set the python code on the Pi to autostart at boot so you can install it and leave it.\r\n* If this is going to be used at a conference or other large event where lots of big cellphones are going to be clogging the air then secure a wired connection. \r\n* Install the break beam sensors towards the floor of the chute and slightly back from the goal to ensure the ball crosses. \r\n\r\n### Cloudant and Starter Documents\r\nThe app uses an instance of Cloudant running in [IBM Bluemix](https://console.ng.bluemix.net/catalog/).  The application also makes use of the Cloudant nodes so if you choose to deviate from Cloudant then you will need to recode the database sections. \r\n\r\nAfter deploying the application confirm that the players, games, and nodered databases exist.  Confirm that two documents exist in the games database with _ids of totalGames and 1. \r\n\r\nExample Game Document: \r\n```\r\n{\r\n  \"_id\": \"1\",\r\n  \"_rev\": \"1-d6afc36ecfefdbb4af0b53211c1501ff\",\r\n  \"userTeamOne\": \"Anonymous\",\r\n  \"idTeamOne\": null,\r\n  \"userTeamOnePhoto\": null,\r\n  \"userTeamTwo\": \"Incognito\",\r\n  \"idTeamTwo\": null,\r\n  \"userTeamTwoPhoto\": null,\r\n  \"goalsTeamOne\": 4,\r\n  \"goalsTeamTwo\": 5,\r\n  \"startTime\": \"Fri Mar 11 2016 17:27:35 GMT+0000 (UTC)\",\r\n  \"endTime\": \"Fri Mar 11 2016 17:32:40 GMT+0000 (UTC)\",\r\n  \"lastBall\": \"2016-03-11T17:32:38.912Z\",\r\n  \"currentBall\": \"2016-03-11T17:32:40.534Z\",\r\n  \"gameActive\": false\r\n}\r\n```\r\n\r\nExample Player Document: \r\n```\r\n{\r\n  \"_id\": \"3061923715\",\r\n  \"_rev\": \"43-49357dbbf375e47cf1e1cd7826a377d5\",\r\n  \"handle\": \"Heres__Ollie\",\r\n  \"name\": \"Oliver Rodriguez\",\r\n  \"photo\": \"https://pbs.twimg.com/profile_images/573244648291885057/qXxCD2am.jpeg\",\r\n  \"gamesWon\": 2,\r\n  \"gamesLost\": 0,\r\n  \"pointsFor\": 10,\r\n  \"pointsAgainst\": 6,\r\n  \"lastPlayed\": \"Fri Mar 11 2016 21:12:41 GMT+0000 (UTC)\",\r\n  \"lastGame\": \"33\"\r\n}\r\n```\r\n\r\n### Express Server and Node-RED\r\nThe Express server handles a minimal amount of processing to keep all of the app logic in Node-RED.  Therefore very few changes have to be made to the code to get it running for you.\r\n\r\n#### server.js\r\nCreate an app with Twitter using http://yourapproute.com/login/twitter/return as the callback URL, replacing yourapproute.com with the URL for the root site of your application.  After you have the consumer key and token update passport.use and client.post in server.js.\r\n\r\n```javascript\r\n// Update the credentials with the information from your Twitter app \r\npassport.use(new Strategy({\r\n    consumerKey: \"TWITTER CONSUMER KEY\",   //CHANGE ME\r\n    consumerSecret: \"TWITTER CONSUMER SECRET\",  //CHANGE ME\r\n    callbackURL: \"http://yourwebsite.com/login/twitter/return\" //CHANGE ME\r\n  },\r\n  function(token, tokenSecret, player, cb) {\r\n    \r\n\t// Grab the Twitter photo and strip out the minimizer  \r\n    var photo = player.photos[0].value;\r\n    photo = photo.replace(\"_normal\", \"\"); \r\n    console.log(photo);\r\n  \t\r\n  \t// Let Node-RED know there has been a successful login and send the profile data for further processing\r\n  \tvar args = {\r\n\t   data: {id:player.id,handle:player.username,name:player.displayName,photo:photo,chosenTeam:team},\r\n\t   headers: { \"Content-Type\": \"application/json\" }\r\n\t};\r\n\t   \r\n\tclient.post(\"http://yourwebsite.com/player\", args, function (data, response) {  //CHANGE ME\r\n\t\t//console.log(data);\r\n\t\t//console.log(response);\r\n\t});\r\n  \t\r\n    return cb(null, player);\r\n}));\r\n```\r\n#### defaults/flow.json\r\nUpon deploy the app should create the flow for the foosball table, but if it doesn't, navigate to defaults/flow.json and import the JSON into Node-RED.\r\n\r\n#### Watson IoT Foundation\r\nThe app deploys an instance of the IoT Foundation service.  You will need to run the following python code on your device and make sure it connects.  Update the blue Data from Table node with the correct credentials for your device and the service. \r\n\r\n#### main.py\r\n\r\n##### Data from Table node\r\n\r\n### User Interface\r\nThe only update to the user interface is for the colors assigned to each team.  Figure out the color for team 1 and team 2 and update public/assets/js/game.js with the correct labels. \r\n\r\n```javascript\r\n// You will need to know which sensor maps to which team color.\r\nvar team1 = 'Yellow'; //TODO Change to match your Team One color\r\nvar team2 = 'Black'; //TODO Change to match your Team Two color\r\n```\r\n\r\n### Authors and Contributors\r\nVersion two of this code is the collaboration of [Stefania Kaczmarczyk](https://github.com/slkaczma) and [Oliver Rodriguez](https://github.com/odrodrig) for SXSW 2016. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}